An experiment into productivity programming for a total of 24 hours in sittings of no more than 1 to 2 hours per day to produce a game based on a clone of the Atari Jaguar game 'Down Fall' using only Javascript and HTML5 Canvas, and an IDE that doesn't have code completion (Notepad ++) and the internet for reference.  Additional libraries and frameworks are not aloud.  I will then produce a different game over longer sittings in a more conventional work base setting i.e. 9 â€“ 5 breaking every 2 hours.  After which I will compare the two experiences.

2 hrs 
Started by creating a basic skeleton layout with vector graphics by using the basic move and line to, a gradient fill background and scoreboard.  A basic player object was create containing draw and basic left / right movement controlled by the keyboard.  Also a simple platform object was create containing draw methods.  The start of the main game loop was added to draw everything to screen.

3 hr
Added platform collision method and player drop method to allow player to drop and land on a static platform.  Player will wrap if the sprite leaves the far right / left and bottom of screen. Added collision detection to the platform object so player can collide and stand on the platform.  Next I moved onto dealing with multiple platforms and decide by adding a class to handle platform spawning (at the moment just two) and stores them within an array.  It also deals with player collisions of each platform which now allows the player collision with any of the platforms.  Last minute additions methods to deal with platform movement with wrap around and making sure the player stays on the platform that it has collided with whilst the platform is moving.  

4 hr 
Added a simple title and game over screen and implemented scoring logic.  The scoring is based on the amount of time the player stays on screen.  Providing the player doesn't fall off the bottom of the screen the score is increment.  If the high score is reach the high score is adjusted.  If the player falls off the bottom or disappears off the top of the screen when riding a platform then the game over screen is shown.  The player hits any key to move back to the title screen and again to start the game with their score reset to zero by the high score maintained.  Finished off with a quick refactor of some of the code.

5 hr
Added simple parallax scrolling using wrapping rectangles for time being. Aligned game text;

6 hr
Added a basic random platform generator that regenerates a set of platforms when the current set leaves the top of screen.  

6 hr Retrospective:
Breaking down the sittings to 1 to 2 hours has lead to a defined achievable goal being set for the sitting.  The goals themselves with minimum needed to fulfil and then are built upon and then fleshed out at later sittings.  If this was one continuous sitting i.e. a full day I believe that less would be achieved as the goals would have been though of more in the larger picture.  That along with less rest to allow the brain to reset and digest what work has been achieved.  Even when I am not working on the project I have thoughts about what to work on next and how to tackle the next upcoming goal.  I haven't learnt any new javascript functions, I have been sticking to what I know because of the tight sitting times so I would like to introduce a couple 

7 hr 
Worked on the random platform generator so platforms and allowed for the platforms to distributed across the width of the screen evenly by calculating the space needed between platforms. I also implemented a spawn time so the plaforms so multiple rows of platforms can be spawned between intervals.  I had some slow down of drawing which was due to test output so went through the code and clear out these as they are no long need. Introduced my self to the [].reduce function which I have heard of but never used before.  

8 hr
Added a small bit of animation so to get that started, a kind of a head bob. Added player gravity, increasing the fall rate when dropping.  Added friction and accleration and deceleration, player ramps up the speed until they reach the max speed when walking on a platform, player will slide when changing direction and forward speed will decrease to zero when dropping.  

9 hrs
Some code refactoring, grabed some graphics from https://opengameart.org to use as platform grapics and built a sprite sheet routinue to display the individual plaform graphics.  Started splitting out the main loop into seperate draw and update sections.
https://itch.io/
https://opengameart.org/content/handpainted-platform-tileset
https://opengameart.org/content/block-breaking-block-pack-hd2
https://opengameart.org/content/ball-set-svg
https://www.fosshub.com/Synfig.html
https://twitter.com/GameDev_studio

10hr
Updated the platform draw code to use the new graphics and modified the plaform class, plaform spawner and plaform bounds detection to take into width in x * 32 pixel units, the width of the graphic rather than an overall length.  Identified a few bugs; when the player first starts they cannot travel left or right through the air as I have removed this ability to make the game harder.  when running on the plaforms the forward momentum will decrease due to air friction as in real life.  As the player has no momentum then they just travel straight down when the game starts sometimes missing all a plaform and ending up leaving the bottom of the screen.  I need to allow the player to move left or right whilst falling for the firt drop.  The player animation doesn;t work when travelling left.  Also the source is becoming hard to work with.  I need to section it out into a class per page.

11hr 
Looking at some graphics for the parallax scroll.  After a bit of image searching through the internet for insperation I decided that I would use a simple transparent hex background.  Put together the code in a seperate html file so I can play about with creating hexagons in different formations and colours until I get something close to what I want.  Finished with 2 groups of hexagons running down the left hand of the screen the smaller hexagons are the foreground the larger the back.

13 hr
Woked on the layout so once the hexagon groups would be produced as images they would seamlessly scroll.  After which I needed to get these out of the canvas as seperate images.
Getting the code down to actually produce these as usable transparent images which was a bit harder than I thought.  Luckly someone had perfected the task which I was able to lift to my code.  Finished with some code clean up and arrange the images onscreen to where they would be in the game

14 hr 
Added new style platforms to the hexzgon background so it ties in nicely and worked on generation and spacing logic which is going back to the vector drawing rather than the sprite sheet.  Also would like to add a speed difference when the platforms move.  The smaller the plaform the faster it will move so you will get plaform cross over making the game harder.

15hr Applied hexagon background to the main game

16hr Playing with a neon effect for the hexagons.

17hr Applied neon hexagon background to game.  Also applied the new style vector drawn plaforms but only for the smallest platform and produced these as a neon effect.  The draw rate is now slow so may have to create these as graphics.

18hr Added random spawning platform code to place the plaforms across the screen

20hr Platform is now rendered to an image to speed up drawing.  Code clean up including seperation into seperate files for objects.

21hr A number of different sized plaform images are now rendered.  More code clean up

22hr Created animation, implement async image loader, neatened up some code, 

23hr Implemented player animation, fixed scoreboard layout, bug fixes

24 hr Implemented animated rings to collect which will increase score, stylised start and end title text